{"version":3,"file":"otpauth.node.min.mjs","sources":["../src/utils/encoding/uint.js","../src/utils/global-scope.js","../src/utils/crypto/hmac-digest.js","../src/utils/encoding/base32.js","../src/utils/encoding/hex.js","../src/utils/encoding/latin1.js","../src/utils/encoding/utf8.js","../src/utils/crypto/random-bytes.js","../src/secret.js","../src/utils/crypto/timing-safe-equal.js","../src/hotp.js","../src/totp.js","../src/uri.js","../src/version.js"],"sourcesContent":["/**\n * Converts an integer to an ArrayBuffer.\n * @param {number} num Integer.\n * @returns {ArrayBuffer} ArrayBuffer.\n */\nconst uintToBuf = (num) => {\n  const buf = new ArrayBuffer(8);\n  const arr = new Uint8Array(buf);\n  let acc = num;\n\n  for (let i = 7; i >= 0; i--) {\n    if (acc === 0) break;\n    arr[i] = acc & 255;\n    acc -= arr[i];\n    acc /= 256;\n  }\n\n  return buf;\n};\n\n/**\n * Converts an ArrayBuffer to an integer.\n * @param {ArrayBuffer} buf ArrayBuffer.\n * @returns {number} Integer.\n */\nconst uintFromBuf = (buf) => {\n  const arr = new Uint8Array(buf);\n  let num = 0;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] !== 0) {\n      num *= 256;\n      num += arr[i];\n    }\n  }\n\n  return num;\n};\n\nexport { uintToBuf, uintFromBuf };\n","/**\n * \"globalThis\" ponyfill.\n * @see [A horrifying globalThis polyfill in universal JavaScript](https://mathiasbynens.be/notes/globalthis)\n * @type {Object.<string, *>}\n */\nconst globalScope = (() => {\n  if (typeof globalThis === \"object\") return globalThis;\n  else {\n    Object.defineProperty(Object.prototype, \"__GLOBALTHIS__\", {\n      get() {\n        return this;\n      },\n      configurable: true,\n    });\n    try {\n      // @ts-ignore\n      // eslint-disable-next-line no-undef\n      if (typeof __GLOBALTHIS__ !== \"undefined\") return __GLOBALTHIS__;\n    } finally {\n      // @ts-ignore\n      delete Object.prototype.__GLOBALTHIS__;\n    }\n  }\n\n  // Still unable to determine \"globalThis\", fall back to a naive method.\n  if (typeof self !== \"undefined\") return self;\n  else if (typeof window !== \"undefined\") return window;\n  else if (typeof global !== \"undefined\") return global;\n\n  return undefined;\n})();\n\nexport { globalScope };\n","import * as crypto from \"node:crypto\";\n//import jsSHA from \"jssha\";\n\nimport { globalScope } from \"../global-scope.js\";\n\n/**\n * OpenSSL to jsSHA algorithms map.\n * @type {Object.<string, \"SHA-1\"|\"SHA-224\"|\"SHA-256\"|\"SHA-384\"|\"SHA-512\"|\"SHA3-224\"|\"SHA3-256\"|\"SHA3-384\"|\"SHA3-512\">}\n */\nconst OPENSSL_JSSHA_ALGO_MAP = {\n  SHA1: \"SHA-1\",\n  SHA224: \"SHA-224\",\n  SHA256: \"SHA-256\",\n  SHA384: \"SHA-384\",\n  SHA512: \"SHA-512\",\n  \"SHA3-224\": \"SHA3-224\",\n  \"SHA3-256\": \"SHA3-256\",\n  \"SHA3-384\": \"SHA3-384\",\n  \"SHA3-512\": \"SHA3-512\",\n};\n\n/**\n * Calculates an HMAC digest.\n * In Node.js, the command \"openssl list -digest-algorithms\" displays the available digest algorithms.\n * @param {string} algorithm Algorithm.\n * @param {ArrayBuffer} key Key.\n * @param {ArrayBuffer} message Message.\n * @returns {Promise<ArrayBuffer>} Digest.\n */\nconst hmacDigest = async (algorithm, key, message) => {\n  if (crypto?.createHmac) {\n    const hmac = crypto.createHmac(algorithm, globalScope.Buffer.from(key));\n    hmac.update(globalScope.Buffer.from(message));\n    return hmac.digest().buffer;\n  }\n\n  const variant = OPENSSL_JSSHA_ALGO_MAP[algorithm.toUpperCase()];\n  if (typeof variant === \"undefined\") {\n    throw new TypeError(\"Unknown hash function\");\n  }\n\n  if (globalScope?.crypto?.subtle) {\n    const crypto = globalScope.crypto;\n\n    const algorithm = {\n      name: \"HMAC\",\n      hash: variant,\n    };\n\n    const hmacKey = await crypto.subtle.importKey(\n      \"raw\",\n      key,\n      algorithm,\n      false,\n      [\"sign\"],\n    );\n\n    return await crypto.subtle.sign(algorithm, hmacKey, message);\n  } else {\n    throw new Error(\"a\");\n    /*const hmac = new jsSHA(variant, \"ARRAYBUFFER\");\n    hmac.setHMACKey(key, \"ARRAYBUFFER\");\n    hmac.update(message);\n    return hmac.getHMAC(\"ARRAYBUFFER\");*/\n  }\n};\n\nexport { hmacDigest };\n","/**\n * RFC 4648 base32 alphabet without pad.\n * @type {string}\n */\nconst ALPHABET = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";\n\n/**\n * Converts a base32 string to an ArrayBuffer (RFC 4648).\n * @see [LinusU/base32-decode](https://github.com/LinusU/base32-decode)\n * @param {string} str Base32 string.\n * @returns {ArrayBuffer} ArrayBuffer.\n */\nconst base32ToBuf = (str) => {\n  // Canonicalize to all upper case and remove padding if it exists.\n  let end = str.length;\n  while (str[end - 1] === \"=\") --end;\n  const cstr = (end < str.length ? str.substring(0, end) : str).toUpperCase();\n\n  const buf = new ArrayBuffer(((cstr.length * 5) / 8) | 0);\n  const arr = new Uint8Array(buf);\n  let bits = 0;\n  let value = 0;\n  let index = 0;\n\n  for (let i = 0; i < cstr.length; i++) {\n    const idx = ALPHABET.indexOf(cstr[i]);\n    if (idx === -1) throw new TypeError(`Invalid character found: ${cstr[i]}`);\n\n    value = (value << 5) | idx;\n    bits += 5;\n\n    if (bits >= 8) {\n      bits -= 8;\n      arr[index++] = value >>> bits;\n    }\n  }\n\n  return buf;\n};\n\n/**\n * Converts an ArrayBuffer to a base32 string (RFC 4648).\n * @see [LinusU/base32-encode](https://github.com/LinusU/base32-encode)\n * @param {ArrayBuffer} buf ArrayBuffer.\n * @returns {string} Base32 string.\n */\nconst base32FromBuf = (buf) => {\n  const arr = new Uint8Array(buf);\n  let bits = 0;\n  let value = 0;\n  let str = \"\";\n\n  for (let i = 0; i < arr.length; i++) {\n    value = (value << 8) | arr[i];\n    bits += 8;\n\n    while (bits >= 5) {\n      str += ALPHABET[(value >>> (bits - 5)) & 31];\n      bits -= 5;\n    }\n  }\n\n  if (bits > 0) {\n    str += ALPHABET[(value << (5 - bits)) & 31];\n  }\n\n  return str;\n};\n\nexport { base32ToBuf, base32FromBuf };\n","/**\n * Converts a hexadecimal string to an ArrayBuffer.\n * @param {string} str Hexadecimal string.\n * @returns {ArrayBuffer} ArrayBuffer.\n */\nconst hexToBuf = (str) => {\n  const buf = new ArrayBuffer(str.length / 2);\n  const arr = new Uint8Array(buf);\n\n  for (let i = 0; i < str.length; i += 2) {\n    arr[i / 2] = parseInt(str.substring(i, i + 2), 16);\n  }\n\n  return buf;\n};\n\n/**\n * Converts an ArrayBuffer to a hexadecimal string.\n * @param {ArrayBuffer} buf ArrayBuffer.\n * @returns {string} Hexadecimal string.\n */\nconst hexFromBuf = (buf) => {\n  const arr = new Uint8Array(buf);\n  let str = \"\";\n\n  for (let i = 0; i < arr.length; i++) {\n    const hex = arr[i].toString(16);\n    if (hex.length === 1) str += \"0\";\n    str += hex;\n  }\n\n  return str.toUpperCase();\n};\n\nexport { hexToBuf, hexFromBuf };\n","/**\n * Converts a Latin-1 string to an ArrayBuffer.\n * @param {string} str Latin-1 string.\n * @returns {ArrayBuffer} ArrayBuffer.\n */\nconst latin1ToBuf = (str) => {\n  const buf = new ArrayBuffer(str.length);\n  const arr = new Uint8Array(buf);\n\n  for (let i = 0; i < str.length; i++) {\n    arr[i] = str.charCodeAt(i) & 0xff;\n  }\n\n  return buf;\n};\n\n/**\n * Converts an ArrayBuffer to a Latin-1 string.\n * @param {ArrayBuffer} buf ArrayBuffer.\n * @returns {string} Latin-1 string.\n */\nconst latin1FromBuf = (buf) => {\n  const arr = new Uint8Array(buf);\n  let str = \"\";\n\n  for (let i = 0; i < arr.length; i++) {\n    str += String.fromCharCode(arr[i]);\n  }\n\n  return str;\n};\n\nexport { latin1ToBuf, latin1FromBuf };\n","import { globalScope } from \"../global-scope.js\";\n\n/**\n * TextEncoder instance.\n * @type {TextEncoder|null}\n */\nconst ENCODER = globalScope.TextEncoder\n  ? new globalScope.TextEncoder(\"utf-8\")\n  : null;\n\n/**\n * TextDecoder instance.\n * @type {TextDecoder|null}\n */\nconst DECODER = globalScope.TextDecoder\n  ? new globalScope.TextDecoder(\"utf-8\")\n  : null;\n\n/**\n * Converts an UTF-8 string to an ArrayBuffer.\n * @param {string} str String.\n * @returns {ArrayBuffer} ArrayBuffer.\n */\nconst utf8ToBuf = (str) => {\n  if (!ENCODER) {\n    throw new Error(\"Encoding API not available\");\n  }\n\n  return ENCODER.encode(str).buffer;\n};\n\n/**\n * Converts an ArrayBuffer to an UTF-8 string.\n * @param {ArrayBuffer} buf ArrayBuffer.\n * @returns {string} String.\n */\nconst utf8FromBuf = (buf) => {\n  if (!DECODER) {\n    throw new Error(\"Encoding API not available\");\n  }\n\n  return DECODER.decode(buf);\n};\n\nexport { utf8ToBuf, utf8FromBuf };\n","import * as crypto from \"node:crypto\";\n\nimport { globalScope } from \"../global-scope.js\";\n\n/**\n * Returns random bytes.\n * @param {number} size Size.\n * @returns {ArrayBuffer} Random bytes.\n */\nconst randomBytes = (size) => {\n  if (crypto?.randomBytes) {\n    return crypto.randomBytes(size).buffer;\n  } else {\n    if (!globalScope.crypto?.getRandomValues) {\n      throw new Error(\"Cryptography API not available\");\n    }\n    return globalScope.crypto.getRandomValues(new Uint8Array(size)).buffer;\n  }\n};\n\nexport { randomBytes };\n","import { base32ToBuf, base32FromBuf } from \"./utils/encoding/base32.js\";\nimport { hexToBuf, hexFromBuf } from \"./utils/encoding/hex.js\";\nimport { latin1ToBuf, latin1FromBuf } from \"./utils/encoding/latin1.js\";\nimport { utf8ToBuf, utf8FromBuf } from \"./utils/encoding/utf8.js\";\nimport { randomBytes } from \"./utils/crypto/random-bytes.js\";\n\n/**\n * OTP secret key.\n */\nclass Secret {\n  /**\n   * Creates a secret key object.\n   * @param {Object} [config] Configuration options.\n   * @param {ArrayBuffer} [config.buffer=randomBytes] Secret key.\n   * @param {number} [config.size=20] Number of random bytes to generate, ignored if 'buffer' is provided.\n   */\n  constructor({ buffer, size = 20 } = {}) {\n    /**\n     * Secret key.\n     * @type {ArrayBuffer}\n     */\n    this.buffer = typeof buffer === \"undefined\" ? randomBytes(size) : buffer;\n  }\n\n  /**\n   * Converts a Latin-1 string to a Secret object.\n   * @param {string} str Latin-1 string.\n   * @returns {Secret} Secret object.\n   */\n  static fromLatin1(str) {\n    return new Secret({ buffer: latin1ToBuf(str) });\n  }\n\n  /**\n   * Converts an UTF-8 string to a Secret object.\n   * @param {string} str UTF-8 string.\n   * @returns {Secret} Secret object.\n   */\n  static fromUTF8(str) {\n    return new Secret({ buffer: utf8ToBuf(str) });\n  }\n\n  /**\n   * Converts a base32 string to a Secret object.\n   * @param {string} str Base32 string.\n   * @returns {Secret} Secret object.\n   */\n  static fromBase32(str) {\n    return new Secret({ buffer: base32ToBuf(str) });\n  }\n\n  /**\n   * Converts a hexadecimal string to a Secret object.\n   * @param {string} str Hexadecimal string.\n   * @returns {Secret} Secret object.\n   */\n  static fromHex(str) {\n    return new Secret({ buffer: hexToBuf(str) });\n  }\n\n  /**\n   * Latin-1 string representation of secret key.\n   * @type {string}\n   */\n  get latin1() {\n    Object.defineProperty(this, \"latin1\", {\n      enumerable: true,\n      value: latin1FromBuf(this.buffer),\n    });\n\n    return this.latin1;\n  }\n\n  /**\n   * UTF-8 string representation of secret key.\n   * @type {string}\n   */\n  get utf8() {\n    Object.defineProperty(this, \"utf8\", {\n      enumerable: true,\n      value: utf8FromBuf(this.buffer),\n    });\n\n    return this.utf8;\n  }\n\n  /**\n   * Base32 string representation of secret key.\n   * @type {string}\n   */\n  get base32() {\n    Object.defineProperty(this, \"base32\", {\n      enumerable: true,\n      value: base32FromBuf(this.buffer),\n    });\n\n    return this.base32;\n  }\n\n  /**\n   * Hexadecimal string representation of secret key.\n   * @type {string}\n   */\n  get hex() {\n    Object.defineProperty(this, \"hex\", {\n      enumerable: true,\n      value: hexFromBuf(this.buffer),\n    });\n\n    return this.hex;\n  }\n}\n\nexport { Secret };\n","import * as crypto from \"node:crypto\";\n\nimport { globalScope } from \"../global-scope.js\";\n\n/**\n * Returns true if a is equal to b, without leaking timing information that would allow an attacker to guess one of the values.\n * @param {string} a String a.\n * @param {string} b String b.\n * @returns {boolean} Equality result.\n */\nconst timingSafeEqual = (a, b) => {\n  if (crypto?.timingSafeEqual) {\n    return crypto.timingSafeEqual(\n      globalScope.Buffer.from(a),\n      globalScope.Buffer.from(b),\n    );\n  } else {\n    if (a.length !== b.length) {\n      throw new TypeError(\"Input strings must have the same length\");\n    }\n    let i = -1;\n    let out = 0;\n    while (++i < a.length) {\n      out |= a.charCodeAt(i) ^ b.charCodeAt(i);\n    }\n    return out === 0;\n  }\n};\n\nexport { timingSafeEqual };\n","import { uintToBuf } from \"./utils/encoding/uint.js\";\nimport { hmacDigest } from \"./utils/crypto/hmac-digest.js\";\nimport { Secret } from \"./secret.js\";\nimport { timingSafeEqual } from \"./utils/crypto/timing-safe-equal.js\";\n\n/**\n * HOTP: An HMAC-based One-time Password Algorithm.\n * @see [RFC 4226](https://tools.ietf.org/html/rfc4226)\n */\nclass HOTP {\n  /**\n   * Default configuration.\n   * @type {{\n   *   issuer: string,\n   *   label: string,\n   *   issuerInLabel: boolean,\n   *   algorithm: string,\n   *   digits: number,\n   *   counter: number\n   *   window: number\n   * }}\n   */\n  static get defaults() {\n    return {\n      issuer: \"\",\n      label: \"OTPAuth\",\n      issuerInLabel: true,\n      algorithm: \"SHA1\",\n      digits: 6,\n      counter: 0,\n      window: 1,\n    };\n  }\n\n  /**\n   * Creates an HOTP object.\n   * @param {Object} [config] Configuration options.\n   * @param {string} [config.issuer=''] Account provider.\n   * @param {string} [config.label='OTPAuth'] Account label.\n   * @param {boolean} [config.issuerInLabel=true] Include issuer prefix in label.\n   * @param {Secret|string} [config.secret=Secret] Secret key.\n   * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n   * @param {number} [config.digits=6] Token length.\n   * @param {number} [config.counter=0] Initial counter value.\n   */\n  constructor({\n    issuer = HOTP.defaults.issuer,\n    label = HOTP.defaults.label,\n    issuerInLabel = HOTP.defaults.issuerInLabel,\n    secret = new Secret(),\n    algorithm = HOTP.defaults.algorithm,\n    digits = HOTP.defaults.digits,\n    counter = HOTP.defaults.counter,\n  } = {}) {\n    /**\n     * Account provider.\n     * @type {string}\n     */\n    this.issuer = issuer;\n    /**\n     * Account label.\n     * @type {string}\n     */\n    this.label = label;\n    /**\n     * Include issuer prefix in label.\n     * @type {boolean}\n     */\n    this.issuerInLabel = issuerInLabel;\n    /**\n     * Secret key.\n     * @type {Secret}\n     */\n    this.secret =\n      typeof secret === \"string\" ? Secret.fromBase32(secret) : secret;\n    /**\n     * HMAC hashing algorithm.\n     * @type {string}\n     */\n    this.algorithm = algorithm.toUpperCase();\n    /**\n     * Token length.\n     * @type {number}\n     */\n    this.digits = digits;\n    /**\n     * Initial counter value.\n     * @type {number}\n     */\n    this.counter = counter;\n  }\n\n  /**\n   * Generates an HOTP token.\n   * @param {Object} config Configuration options.\n   * @param {Secret} config.secret Secret key.\n   * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n   * @param {number} [config.digits=6] Token length.\n   * @param {number} [config.counter=0] Counter value.\n   * @returns {Promise<string>} Token.\n   */\n  static async generate({\n    secret,\n    algorithm = HOTP.defaults.algorithm,\n    digits = HOTP.defaults.digits,\n    counter = HOTP.defaults.counter,\n  }) {\n    const digest = new Uint8Array(\n      await hmacDigest(algorithm, secret.buffer, uintToBuf(counter)),\n    );\n    const offset = digest[digest.byteLength - 1] & 15;\n    const otp =\n      (((digest[offset] & 127) << 24) |\n        ((digest[offset + 1] & 255) << 16) |\n        ((digest[offset + 2] & 255) << 8) |\n        (digest[offset + 3] & 255)) %\n      10 ** digits;\n\n    return otp.toString().padStart(digits, \"0\");\n  }\n\n  /**\n   * Generates an HOTP token.\n   * @param {Object} [config] Configuration options.\n   * @param {number} [config.counter=this.counter++] Counter value.\n   * @returns {Promise<string>} Token.\n   */\n  generate({ counter = this.counter++ } = {}) {\n    return HOTP.generate({\n      secret: this.secret,\n      algorithm: this.algorithm,\n      digits: this.digits,\n      counter,\n    });\n  }\n\n  /**\n   * Validates an HOTP token.\n   * @param {Object} config Configuration options.\n   * @param {string} config.token Token value.\n   * @param {Secret} config.secret Secret key.\n   * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n   * @param {number} config.digits Token length.\n   * @param {number} [config.counter=0] Counter value.\n   * @param {number} [config.window=1] Window of counter values to test.\n   * @returns {Promise<number|null>} Token delta or null if it is not found in the search window, in which case it should be considered invalid.\n   */\n  static async validate({\n    token,\n    secret,\n    algorithm,\n    digits,\n    counter = HOTP.defaults.counter,\n    window = HOTP.defaults.window,\n  }) {\n    // Return early if the token length does not match the digit number.\n    if (token.length !== digits) return null;\n\n    let delta = null;\n\n    for (let i = counter - window; i <= counter + window; ++i) {\n      const generatedToken = await HOTP.generate({\n        secret,\n        algorithm,\n        digits,\n        counter: i,\n      });\n\n      if (timingSafeEqual(token, generatedToken)) {\n        delta = i - counter;\n      }\n    }\n\n    return delta;\n  }\n\n  /**\n   * Validates an HOTP token.\n   * @param {Object} config Configuration options.\n   * @param {string} config.token Token value.\n   * @param {number} [config.counter=this.counter] Counter value.\n   * @param {number} [config.window=1] Window of counter values to test.\n   * @returns {Promise<number|null>} Token delta or null if it is not found in the search window, in which case it should be considered invalid.\n   */\n  validate({ token, counter = this.counter, window }) {\n    return HOTP.validate({\n      token,\n      secret: this.secret,\n      algorithm: this.algorithm,\n      digits: this.digits,\n      counter,\n      window,\n    });\n  }\n\n  /**\n   * Returns a Google Authenticator key URI.\n   * @returns {string} URI.\n   */\n  toString() {\n    const e = encodeURIComponent;\n    return (\n      \"otpauth://hotp/\" +\n      `${\n        this.issuer.length > 0\n          ? this.issuerInLabel\n            ? `${e(this.issuer)}:${e(this.label)}?issuer=${e(this.issuer)}&`\n            : `${e(this.label)}?issuer=${e(this.issuer)}&`\n          : `${e(this.label)}?`\n      }` +\n      `secret=${e(this.secret.base32)}&` +\n      `algorithm=${e(this.algorithm)}&` +\n      `digits=${e(this.digits)}&` +\n      `counter=${e(this.counter)}`\n    );\n  }\n}\n\nexport { HOTP };\n","import { HOTP } from \"./hotp.js\";\nimport { Secret } from \"./secret.js\";\n\n/**\n * TOTP: Time-Based One-Time Password Algorithm.\n * @see [RFC 6238](https://tools.ietf.org/html/rfc6238)\n */\nclass TOTP {\n  /**\n   * Default configuration.\n   * @type {{\n   *   issuer: string,\n   *   label: string,\n   *   issuerInLabel: boolean,\n   *   algorithm: string,\n   *   digits: number,\n   *   period: number\n   *   window: number\n   * }}\n   */\n  static get defaults() {\n    return {\n      issuer: \"\",\n      label: \"OTPAuth\",\n      issuerInLabel: true,\n      algorithm: \"SHA1\",\n      digits: 6,\n      period: 30,\n      window: 1,\n    };\n  }\n\n  /**\n   * Creates a TOTP object.\n   * @param {Object} [config] Configuration options.\n   * @param {string} [config.issuer=''] Account provider.\n   * @param {string} [config.label='OTPAuth'] Account label.\n   * @param {boolean} [config.issuerInLabel=true] Include issuer prefix in label.\n   * @param {Secret|string} [config.secret=Secret] Secret key.\n   * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n   * @param {number} [config.digits=6] Token length.\n   * @param {number} [config.period=30] Token time-step duration.\n   */\n  constructor({\n    issuer = TOTP.defaults.issuer,\n    label = TOTP.defaults.label,\n    issuerInLabel = TOTP.defaults.issuerInLabel,\n    secret = new Secret(),\n    algorithm = TOTP.defaults.algorithm,\n    digits = TOTP.defaults.digits,\n    period = TOTP.defaults.period,\n  } = {}) {\n    /**\n     * Account provider.\n     * @type {string}\n     */\n    this.issuer = issuer;\n    /**\n     * Account label.\n     * @type {string}\n     */\n    this.label = label;\n    /**\n     * Include issuer prefix in label.\n     * @type {boolean}\n     */\n    this.issuerInLabel = issuerInLabel;\n    /**\n     * Secret key.\n     * @type {Secret}\n     */\n    this.secret =\n      typeof secret === \"string\" ? Secret.fromBase32(secret) : secret;\n    /**\n     * HMAC hashing algorithm.\n     * @type {string}\n     */\n    this.algorithm = algorithm.toUpperCase();\n    /**\n     * Token length.\n     * @type {number}\n     */\n    this.digits = digits;\n    /**\n     * Token time-step duration.\n     * @type {number}\n     */\n    this.period = period;\n  }\n\n  /**\n   * Generates a TOTP token.\n   * @param {Object} config Configuration options.\n   * @param {Secret} config.secret Secret key.\n   * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n   * @param {number} [config.digits=6] Token length.\n   * @param {number} [config.period=30] Token time-step duration.\n   * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n   * @returns {Promise<string>} Token.\n   */\n  static generate({\n    secret,\n    algorithm,\n    digits,\n    period = TOTP.defaults.period,\n    timestamp = Date.now(),\n  }) {\n    return HOTP.generate({\n      secret,\n      algorithm,\n      digits,\n      counter: Math.floor(timestamp / 1000 / period),\n    });\n  }\n\n  /**\n   * Generates a TOTP token.\n   * @param {Object} [config] Configuration options.\n   * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n   * @returns {Promise<string>} Token.\n   */\n  generate({ timestamp = Date.now() } = {}) {\n    return TOTP.generate({\n      secret: this.secret,\n      algorithm: this.algorithm,\n      digits: this.digits,\n      period: this.period,\n      timestamp,\n    });\n  }\n\n  /**\n   * Validates a TOTP token.\n   * @param {Object} config Configuration options.\n   * @param {string} config.token Token value.\n   * @param {Secret} config.secret Secret key.\n   * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n   * @param {number} config.digits Token length.\n   * @param {number} [config.period=30] Token time-step duration.\n   * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n   * @param {number} [config.window=1] Window of counter values to test.\n   * @returns {Promise<number|null>} Token delta or null if it is not found in the search window, in which case it should be considered invalid.\n   */\n  static validate({\n    token,\n    secret,\n    algorithm,\n    digits,\n    period = TOTP.defaults.period,\n    timestamp = Date.now(),\n    window,\n  }) {\n    return HOTP.validate({\n      token,\n      secret,\n      algorithm,\n      digits,\n      counter: Math.floor(timestamp / 1000 / period),\n      window,\n    });\n  }\n\n  /**\n   * Validates a TOTP token.\n   * @param {Object} config Configuration options.\n   * @param {string} config.token Token value.\n   * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n   * @param {number} [config.window=1] Window of counter values to test.\n   * @returns {Promise<number|null>} Token delta or null if it is not found in the search window, in which case it should be considered invalid.\n   */\n  validate({ token, timestamp, window }) {\n    return TOTP.validate({\n      token,\n      secret: this.secret,\n      algorithm: this.algorithm,\n      digits: this.digits,\n      period: this.period,\n      timestamp,\n      window,\n    });\n  }\n\n  /**\n   * Returns a Google Authenticator key URI.\n   * @returns {string} URI.\n   */\n  toString() {\n    const e = encodeURIComponent;\n    return (\n      \"otpauth://totp/\" +\n      `${\n        this.issuer.length > 0\n          ? this.issuerInLabel\n            ? `${e(this.issuer)}:${e(this.label)}?issuer=${e(this.issuer)}&`\n            : `${e(this.label)}?issuer=${e(this.issuer)}&`\n          : `${e(this.label)}?`\n      }` +\n      `secret=${e(this.secret.base32)}&` +\n      `algorithm=${e(this.algorithm)}&` +\n      `digits=${e(this.digits)}&` +\n      `period=${e(this.period)}`\n    );\n  }\n}\n\nexport { TOTP };\n","import { HOTP } from \"./hotp.js\";\nimport { TOTP } from \"./totp.js\";\n\n/**\n * Key URI regex (otpauth://TYPE/[ISSUER:]LABEL?PARAMETERS).\n * @type {RegExp}\n */\nconst OTPURI_REGEX =\n  /^otpauth:\\/\\/([ht]otp)\\/(.+)\\?([A-Z0-9.~_-]+=[^?&]*(?:&[A-Z0-9.~_-]+=[^?&]*)*)$/i;\n\n/**\n * RFC 4648 base32 alphabet with pad.\n * @type {RegExp}\n */\nconst SECRET_REGEX = /^[2-7A-Z]+=*$/i;\n\n/**\n * Regex for supported algorithms.\n * @type {RegExp}\n */\nconst ALGORITHM_REGEX = /^SHA(?:1|224|256|384|512|3-224|3-256|3-384|3-512)$/i;\n\n/**\n * Integer regex.\n * @type {RegExp}\n */\nconst INTEGER_REGEX = /^[+-]?\\d+$/;\n\n/**\n * Positive integer regex.\n * @type {RegExp}\n */\nconst POSITIVE_INTEGER_REGEX = /^\\+?[1-9]\\d*$/;\n\n/**\n * HOTP/TOTP object/string conversion.\n * @see [Key URI Format](https://github.com/google/google-authenticator/wiki/Key-Uri-Format)\n */\nclass URI {\n  /**\n   * Parses a Google Authenticator key URI and returns an HOTP/TOTP object.\n   * @param {string} uri Google Authenticator Key URI.\n   * @returns {HOTP|TOTP} HOTP/TOTP object.\n   */\n  static parse(uri) {\n    let uriGroups;\n\n    try {\n      uriGroups = uri.match(OTPURI_REGEX);\n    } catch (error) {\n      /* Handled below */\n    }\n\n    if (!Array.isArray(uriGroups)) {\n      throw new URIError(\"Invalid URI format\");\n    }\n\n    // Extract URI groups.\n    const uriType = uriGroups[1].toLowerCase();\n    const uriLabel = uriGroups[2]\n      .split(/(?::|%3A) *(.+)/i, 2)\n      .map(decodeURIComponent);\n    /** @type {Object.<string, string>} */\n    const uriParams = uriGroups[3].split(\"&\").reduce((acc, cur) => {\n      const pairArr = cur.split(/=(.*)/, 2).map(decodeURIComponent);\n      const pairKey = pairArr[0].toLowerCase();\n      const pairVal = pairArr[1];\n      /** @type {Object.<string, string>} */\n      const pairAcc = acc;\n\n      pairAcc[pairKey] = pairVal;\n      return pairAcc;\n    }, {});\n\n    // 'OTP' will be instantiated with 'config' argument.\n    let OTP;\n    const config = {};\n\n    if (uriType === \"hotp\") {\n      OTP = HOTP;\n\n      // Counter: required\n      if (\n        typeof uriParams.counter !== \"undefined\" &&\n        INTEGER_REGEX.test(uriParams.counter)\n      ) {\n        config.counter = parseInt(uriParams.counter, 10);\n      } else {\n        throw new TypeError(\"Missing or invalid 'counter' parameter\");\n      }\n    } else if (uriType === \"totp\") {\n      OTP = TOTP;\n\n      // Period: optional\n      if (typeof uriParams.period !== \"undefined\") {\n        if (POSITIVE_INTEGER_REGEX.test(uriParams.period)) {\n          config.period = parseInt(uriParams.period, 10);\n        } else {\n          throw new TypeError(\"Invalid 'period' parameter\");\n        }\n      }\n    } else {\n      throw new TypeError(\"Unknown OTP type\");\n    }\n\n    // Label: required\n    // Issuer: optional\n    if (typeof uriParams.issuer !== \"undefined\") {\n      config.issuer = uriParams.issuer;\n    }\n    if (uriLabel.length === 2) {\n      config.label = uriLabel[1];\n      if (typeof config.issuer === \"undefined\" || config.issuer === \"\") {\n        config.issuer = uriLabel[0];\n      } else if (uriLabel[0] === \"\") {\n        config.issuerInLabel = false;\n      }\n    } else {\n      config.label = uriLabel[0];\n      if (typeof config.issuer !== \"undefined\" && config.issuer !== \"\") {\n        config.issuerInLabel = false;\n      }\n    }\n\n    // Secret: required\n    if (\n      typeof uriParams.secret !== \"undefined\" &&\n      SECRET_REGEX.test(uriParams.secret)\n    ) {\n      config.secret = uriParams.secret;\n    } else {\n      throw new TypeError(\"Missing or invalid 'secret' parameter\");\n    }\n\n    // Algorithm: optional\n    if (typeof uriParams.algorithm !== \"undefined\") {\n      if (ALGORITHM_REGEX.test(uriParams.algorithm)) {\n        config.algorithm = uriParams.algorithm;\n      } else {\n        throw new TypeError(\"Invalid 'algorithm' parameter\");\n      }\n    }\n\n    // Digits: optional\n    if (typeof uriParams.digits !== \"undefined\") {\n      if (POSITIVE_INTEGER_REGEX.test(uriParams.digits)) {\n        config.digits = parseInt(uriParams.digits, 10);\n      } else {\n        throw new TypeError(\"Invalid 'digits' parameter\");\n      }\n    }\n\n    return new OTP(config);\n  }\n\n  /**\n   * Converts an HOTP/TOTP object to a Google Authenticator key URI.\n   * @param {HOTP|TOTP} otp HOTP/TOTP object.\n   * @returns {string} Google Authenticator Key URI.\n   */\n  static stringify(otp) {\n    if (otp instanceof HOTP || otp instanceof TOTP) {\n      return otp.toString();\n    }\n\n    throw new TypeError(\"Invalid 'HOTP/TOTP' object\");\n  }\n}\n\nexport { URI };\n","/**\n * Library version.\n * @type {string}\n */\nconst version = \"__OTPAUTH_VERSION__\";\n\nexport { version };\n"],"names":["uintToBuf","num","buf","ArrayBuffer","arr","Uint8Array","acc","i","globalScope","globalThis","Object","defineProperty","prototype","get","configurable","__GLOBALTHIS__","self","window","global","n","S","r","A","a","H","t","o","f","e","OPENSSL_JSSHA_ALGO_MAP","SHA1","SHA224","SHA256","SHA384","SHA512","hmacDigest","algorithm","key","message","__async","_a","_b","crypto","createHmac","hmac","Buffer","from","update","digest","buffer","variant","toUpperCase","TypeError","subtle","name","hash","hmacKey","importKey","sign","Error","ALPHABET","base32ToBuf","str","end","length","cstr","substring","bits","value","index","idx","indexOf","base32FromBuf","hexToBuf","parseInt","hexFromBuf","hex","toString","latin1ToBuf","charCodeAt","latin1FromBuf","String","fromCharCode","ENCODER","TextEncoder","DECODER","TextDecoder","utf8ToBuf","encode","utf8FromBuf","decode","randomBytes","size","getRandomValues","Secret","constructor","fromLatin1","fromUTF8","fromBase32","fromHex","latin1","enumerable","utf8","base32","timingSafeEqual","b","out","e$1","HOTP","defaults","issuer","label","issuerInLabel","digits","counter","secret","generate","_0","offset","byteLength","__pow","padStart","validate","token","delta","generatedToken","encodeURIComponent","TOTP","period","timestamp","Date","now","Math","floor","OTPURI_REGEX","SECRET_REGEX","ALGORITHM_REGEX","INTEGER_REGEX","POSITIVE_INTEGER_REGEX","URI","parse","uri","uriGroups","match","error","Array","isArray","URIError","uriType","toLowerCase","uriLabel","split","map","decodeURIComponent","uriParams","reduce","cur","pairArr","pairKey","pairVal","pairAcc","OTP","config","test","stringify","otp","version"],"mappings":"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"}